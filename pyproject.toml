[build-system]
requires = ["setuptools>=61.0", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "sapimclient"
authors = [{ name = "Niels Perfors", email = "niels.perfors1987@gmail.com" }]
readme = "README.rst"
requires-python = ">=3.11"
keywords = ["SAP", "Incentive Management"]
license = { text = "MIT" }
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
]
dependencies = ["aiohttp>=3.0.0", "pydantic>=2.6.0"]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "setuptools>=61.0",
    "setuptools_scm>=6.2",
    "pre-commit==3.7.0",
    "ruff==0.3.5",
    "codespell==2.2.6",
    "yamllint==1.35.1",
    "pylint==3.1.0",
    "mypy==1.9.0",
    "coverage==7.4.4",
    "pytest==8.1.1",
    "pytest-cov==5.0.0",
    "pytest-asyncio==0.23.6",
    "aioresponses>=0.7.6",
    "python-dotenv>=1.0.1",
    "click>=8.1.7",
    "pandas==2.2.2",
    "pandas-stubs>=2.2.2",
    "sphinx==7.4.7",
    "sphinx-rtd-theme==2.0.0",
    "myst-parser==4.0.0",
]
cli = ["click>=8.1.7", "pandas==2.2.2"]

[project.scripts]
sapimclient = "sapimclient.__main__:cli"

[project.urls]
Homepage = "https://github.com/niro1987/sapimclient"
Repository = "https://github.com/niro1987/sapimclient.git"
Issues = "https://github.com/niro1987/sapimclient/issues"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools_scm]

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["docs", "tests"]

[tool.setuptools.package-data]
"sapimclient" = ["py.typed"]

[tool.pytest.ini_options]
testpaths = ["tests"]
norecursedirs = [".git"]
asyncio_mode = "auto"
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s.%(msecs)03d %(levelname)-8s %(name)25s:%(lineno)-4s %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_file = "tests/test.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s.%(msecs)03d %(levelname)-8s %(name)25s:%(lineno)-4s %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

[tool.ruff]
exclude = ["docs"]

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint]
pydocstyle.convention = "google"
select = ["ALL"]
ignore = [
    "ANN101", # Missing type annotation for `self`
    "ANN102", # Missing type annotation for `cls`
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "EM101",  # Exception must not use a string literal, assign to variable first
    "ERA001", # Found commented-out code
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "single"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = []
"src/**/__main__.py" = [
    "PLR0913", # Too many arguments in function definition
]

[tool.ruff.lint.isort]
known-first-party = ["sapimclient"]
combine-as-imports = true
split-on-trailing-comma = true

[tool.mypy]
plugins = ["pydantic.mypy"]
exclude = ["^.*docs/.*$", "^.*tests/.*$"]

[tool.pylint.MAIN]
jobs = 0
persistent = false
py-version = "3.11"
ignore-paths = ["^.*docs/.*$", "^.*tests/.*$"]
load-plugins = [
    "pylint.extensions.code_style",
    "pylint.extensions.docparams",
    "pylint.extensions.docstyle",
    "pylint.extensions.dunder",
    "pylint.extensions.empty_comment",
    "pylint.extensions.no_self_use",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.private_import",
    "pylint.extensions.typing",
]

[tool.pylint."MESSAGES CONTROL"]
disable = ["too-few-public-methods"]
enable = ["use-symbolic-message-instead"]

[tool.pylint.REPORTS]
score = false

[tool.pylint.FORMAT]
expected-line-ending-format = "LF"
max-line-length = 88

[tool.pylint.TYPING]
runtime-typing = false
